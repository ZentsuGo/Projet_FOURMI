type program =
	| Program 	<expression+;>

type compare =
    | Eq            eq <expression> <expression>
	| Inf           le <expression> <expression>
    | Sup           ge <expression> <expression>
	| StInf			lt <expression> <expression>
	| StSup			gt <expression> <expression>


type command = 
	| Move			move(<ident>, [<expression*,>])
	| Mark			mark(<expression>)
	| Unmark		unmark(<expression>)
	| Pickup		pickup(<ident>, [<expression*,>])
	| Turn			turn(<direction>)
	| Sense 		sense(<sensedir>, <cond>, <ident>, <ident>, [<expression*,>;<expression*,>])
	| Flip			flip(<expression>, <ident>, <ident>, [<expression*,> ; <expression*,>])
	| Drop			drop()
	| Wait			wait(<expression>)


type expression =
    | Const         <value>
    | Var           let <ident> = <expression>
	| Deref			!<ident>	
    | If        	if (<expression>) {<program>}
	| Else 			else {<program>} 
    | While         while (<expression>) {<program>}
    | DoWhile       do {<program>} while (<expression>)
    | Compare       <compare>
	| Operation		<operation>
	| Command		<command>
	| Apply 		<ident>(<expression*,>)
    | Func          fun <ident>(<ident*,>) {<program>}
	| Parenthesis	(<expression>)

type operation =
	| Add			add <expression> <expression>
	| Sub			sub <expression> <expression>
	| Mul			mul <expression> <expression>
	| Div			div <expression> <expression>
	| Mod			mod <expression> <expression>

type cond =
	| Friend 			ISFRIEND
	| Foe				ISFOE
	| FriendWithFood	ISFRIENDWITHFOOD
	| FoeWithFood		ISFOEWITHFOOD
	| Food				ISFOOD
	| Rock				ISROCK
	| Marker			ISMARKER <expression>
	| FoeMarker			ISFOEMARKER
	| Home				ISHOME
	| FoeHome			ISFOEHOME

type direction = 
	| Left 		L
	| Right 	R

type sensedir = 
	| LeftAhead 		LEFTAHEAD
	| RightAhead 		RIGHTAHEAD
	| Here				HERE
	| Ahead				AHEAD

type value =
	| Unit		unit
    | Int   	<int>
    | Bool  	<boolean>

type boolean =
    | True  true
    | False false
