type program =
	| Program 	<expression+;>

type compare =
    | Eq            eq <expression>, <expression>
	| Inf           lt <expression>, <expression>
    | Sup           gt <expression>, <expression>
	| StInf			le <expression>, <expression>
	| StSup			ge <expression>, <expression>


type command = 
	| Move			move(<ident>, [<expression*,>])
	| Mark			mark(<int>)
	| Unmark		unmark(<int>)
	| Pickup		pickup(<ident>, [<expression*,>])
	| Turn			turn(<direction>)
	| Sense 		sense(<sensedir>, <cond>, <ident>, [<expression*,>], <ident>, [<expression*,>])
	| Flip			flip(<int>, <ident>, [<expression*,>], <ident>, [<expression*,>])


type expression =
    | Const         <value>
    | Var           let <ident> = <expression>
    | If        	if (<expression>) {<program>}
	| Else 			else {<program>} 
    | While         while (<expression>) {<program>}
    | DoWhile       do {<program>} while (<expression>)
    | Compare       (<compare>)
	| Command		<command>
	| Apply 		<ident>(<expression*,>)
    | Func          fun <ident>(<expression*,>) {<program>}

type operation =
	| Add			add <int <int>
	| Sub			sub <int> <int>
	| Mul			mul <int> <int>
	| Div			div <int> <int>
	| Mod			mod <int> <int>

type cond =
	| Friend 			IS_FRIEND
	| Foe				IS_FOE
	| FriendWithFood	IS_FRIEND_WITH_FOOD
	| FoeWithFood		IS_FOE_WITH_FOOD
	| Food				IS_FOOD
	| Rock				IS_ROCK
	| Marker			IS_MARKER <int>
	| FoeMarker			IS_FOE_MARKER
	| Home				IS_HOME
	| FoeHome			IS_FOE_HOME

type direction = 
	| Left 		L
	| Right 	R

type sensedir = 
	| LeftAhead 		LEFT_AHEAD
	| RightAhead 		RIGHT_AHEAD
	| Here				HERE
	| Ahead				AHEAD

type value =
	| Unit		unit
    | Int   	<int>
    | Bool  	<bool>

type bool =
    | True  true
    | False false
